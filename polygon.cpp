
#include<stdio.h>
#include<GL/glut.h>


void myinit()
{
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluOrtho2D(-100, 500,-100 , 500);

}

void drawPolygon()
{
	glShadeModel(GL_SMOOTH);
	glBegin(GL_QUADS);
	//glEdgeFlag(GL_TRUE);
	glVertex2f(20, 20);
	//glEdgeFlag(GL_FALSE);
	glVertex2f(80, 80);
	//glEdgeFlag(GL_TRUE);
	
	glColor3f(0, 1, 0);
	glVertex2f(130, 80);
	glColor3f(0, 1, 1);
	glVertex2f(200, 20);
	glEnd();
	glFlush();

}
void display1()
{
	glClearColor(1, 1, 1, 0);
	glClear(GL_COLOR_BUFFER_BIT);
	glColor3f(1, 0, 0);

	glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);
	//glPolygonMode(GL_FRONT_AND_BACK, GL_POINT);
	//glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);
	glLineWidth(6);
	glEnable(GL_LINE_STIPPLE);
	glLineStipple(1, 0x0101);  /*  dotted  */
	// drawPolygon();
	// glLineStipple(1, 0x00FF);  /*  dashed  */
	// drawPolygon();
	//glLineStipple(1, 0x1C47);  /*  dash/dot/dash  */
	drawPolygon();

}
void display(void)
{
    // Stipple pattern of my initials (EP)
    GLubyte myInitial[] = {
        0xff, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01,
        0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01,
        0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01,
        0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01,
        0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01,
        0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01,
        0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01,
        0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01,
        0xff, 0x01, 0xff, 0x01, 0x00, 0x01, 0x01, 0x01,
        0x00, 0x01, 0x01, 0x01, 0x00, 0x01, 0x01, 0x01,
        0x00, 0x01, 0x01, 0x01, 0x00, 0x01, 0x01, 0x01,
        0x00, 0x01, 0x01, 0x01, 0x00, 0x01, 0x01, 0x01,
        0x00, 0x01, 0x01, 0x01, 0x00, 0x01, 0x01, 0x01,
        0x00, 0x01, 0x01, 0x01, 0x00, 0x01, 0x01, 0x01,
        0xff, 0x00, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, };

    // A stipple pattern of a fly
    GLubyte fly[] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x03, 0x80, 0x01, 0xC0, 0x06, 0xC0, 0x03, 0x60,
        0x04, 0x60, 0x06, 0x20, 0x04, 0x30, 0x0C, 0x20,
        0x04, 0x18, 0x18, 0x20, 0x04, 0x0C, 0x30, 0x20,
        0x04, 0x06, 0x60, 0x20, 0x44, 0x03, 0xC0, 0x22,
        0x44, 0x01, 0x80, 0x22, 0x44, 0x01, 0x80, 0x22,
        0x44, 0x01, 0x80, 0x22, 0x44, 0x01, 0x80, 0x22,
        0x44, 0x01, 0x80, 0x22, 0x44, 0x01, 0x80, 0x22,
        0x66, 0x01, 0x80, 0x66, 0x33, 0x01, 0x80, 0xCC,
        0x19, 0x81, 0x81, 0x98, 0x0C, 0xC1, 0x83, 0x30,
        0x07, 0xe1, 0x87, 0xe0, 0x03, 0x3f, 0xfc, 0xc0,
        0x03, 0x31, 0x8c, 0xc0, 0x03, 0x33, 0xcc, 0xc0,
        0x06, 0x64, 0x26, 0x60, 0x0c, 0xcc, 0x33, 0x30,
        0x18, 0xcc, 0x33, 0x18, 0x10, 0xc4, 0x23, 0x08,
        0x10, 0x63, 0xC6, 0x08, 0x10, 0x30, 0x0c, 0x08,
        0x10, 0x18, 0x18, 0x08, 0x10, 0x00, 0x00, 0x08 };

    // Another stipple pattern
    GLubyte halftone[] = {
        0xAA, 0xAA, 0xAA, 0xAA, 0x66, 0x66, 0x66, 0x66,
        0xAA, 0xAA, 0xAA, 0xAA, 0x66, 0x66, 0x66, 0x66,
        0xAA, 0xAA, 0xAA, 0xAA, 0x66, 0x66, 0x66, 0x66,
        0xAA, 0xAA, 0xAA, 0xAA, 0x66, 0x66, 0x66, 0x66,
        0xAA, 0xAA, 0xAA, 0xAA, 0x66, 0x66, 0x66, 0x66,
        0xAA, 0xAA, 0xAA, 0xAA, 0x66, 0x66, 0x66, 0x66,
        0xAA, 0xAA, 0xAA, 0xAA, 0x66, 0x66, 0x66, 0x66,
        0xAA, 0xAA, 0xAA, 0xAA, 0x66, 0x66, 0x66, 0x66,
        0xAA, 0xAA, 0xAA, 0xAA, 0x66, 0x66, 0x66, 0x66,
        0xAA, 0xAA, 0xAA, 0xAA, 0x66, 0x66, 0x66, 0x66,
        0xAA, 0xAA, 0xAA, 0xAA, 0x66, 0x66, 0x66, 0x66,
        0xAA, 0xAA, 0xAA, 0xAA, 0x66, 0x66, 0x66, 0x66,
        0xAA, 0xAA, 0xAA, 0xAA, 0x66, 0x66, 0x66, 0x66,
        0xAA, 0xAA, 0xAA, 0xAA, 0x66, 0x66, 0x66, 0x66,
        0xAA, 0xAA, 0xAA, 0xAA, 0x66, 0x66, 0x66, 0x66,
        0xAA, 0xAA, 0xAA, 0xAA, 0x66, 0x66, 0x66, 0x66 };

    // Clear the Color Buffer
    glClear(GL_COLOR_BUFFER_BIT);
    glColor3f(1.0, 1.0, 1.0);        	// Set the color to white 

    // draw one solid, unstippled rectangle
    glRectf(0  , 0, 200, 200);


    glEnable(GL_POLYGON_STIPPLE);          	// Enable POLYGON STIPPLE
    glPolygonStipple(fly);                   	// Pass the stipple array 
    glRectf(210, 0, 310, 210);   	// draw the first rectangle 
                                             // with the first stipple
   glPolygonStipple(halftone);              	// pass the second stipple array
    glRectf(225.0, 25.0, 325.0, 125.0);    	// draw the rectangle

    // My own code starts here
    glColor3f(1.0, 0.0, 0.0);            	// Set change the color to red  
    glPolygonStipple(myInitial);        	// Pass the stipple my initial (EP) 
    glRectf(25.0, 125.0, 325.0, 225.0); 	// Draw a bigger rectangle
    glDisable(GL_POLYGON_STIPPLE);      	// Disable the POLYGON STIPPLE
    glFlush();
}

int main(int argc, char** argv)
{
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_RGB | GLUT_SINGLE);
	glutInitWindowPosition(100, 100);
	glutInitWindowSize(500, 500);
	glutCreateWindow("Polygon Attribute");
	myinit();
	glutDisplayFunc(display);
	glutMainLoop();
}